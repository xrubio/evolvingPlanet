/*
 * Copyright (c) 2015
 * MURPHY'S TOAST GAMES
 * 
 * This file is part of Evolving Planet.
 * Evolving Planet is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Evolving Planet is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Evolving Planet.  If not, see <http://www.gnu.org/licenses/>.
 */

//
//  Exploit.cpp
//  simulplay
//
//  Created by Guillem Laborda on 20/10/14.
//
//

#include "Exploit.h"
#include "UIGameplayMap.h"
#include "GameLevel.h"

void Exploit::execute(Agent* agent)
{
    int resource = GameLevel::getInstance()->getUIGameplayMap()->getValueAtGameplayMap(2, agent->getPosition().getX(), agent->getPosition().getY());
    //if resource valid
    if (resource > 1)
    {
        return;
    }
    //if maximum
    int maxResources = 0;
    for (int i = 0; i < Agent::_resourcesPool.size(); i++)
    {
        maxResources += Agent::_resourcesPool.at(i).at(resource);
    }
    if (maxResources >= Agent::_resourcesPoolMax.at(resource))
    {
        return;
    }
    
    //if its not depleted and is a valid resource (Wood = 0, Mineral = 1)
    if (GameLevel::getInstance()->getDepleted(agent->getPosition().getX(), agent->getPosition().getY()) == false)
    {
        //check if agent exploits
        float probExploitation = agent->getValue(eExploitation);
        if(cocos2d::RandomHelper::random_real(0.0f, 1.0f) >= probExploitation)
        {
            return;
        }
        Agent::_resourcesPool.at(agent->getType()).at(resource)++;
        GameLevel::getInstance()->setDepletedMap(agent->getPosition().getX(), agent->getPosition().getY(), true);
        // regeneration
        if (resource == Wood)
        {
            GameLevel::getInstance()->addDepletedToVector(agent->getPosition().getX(), agent->getPosition().getY());
        }
    }
}

